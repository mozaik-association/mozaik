# Copyright 2018 ACSONE SA/NV
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).
from uuid import uuid4

from odoo.fields import first
from odoo.tests.common import TransactionCase


class TestMailComposeMessage(TransactionCase):
    def setUp(self):
        super(TestMailComposeMessage, self).setUp()
        self.partner_obj = self.env["res.partner"]
        self.mail_composer_obj = self.env["mail.compose.message"]
        self.distri_list_obj = self.env["distribution.list"]
        self.distri_list_line_obj = self.env["distribution.list.line"]
        self.mail_obj = self.env["mail.mail"]
        self.partner_model = self.env.ref("base.model_res_partner")
        self.partner_id_field = self.env.ref("base.field_res_partner__id")

    def test_send_mail_with_distribution_list(self):
        """
        Ensure that resulting ids of distribution list are well computed and
        well used during the `send_mail` process of `mail.compose.message`
        """
        sample_values = str(uuid4())
        dst_model = self.partner_model

        email_test = "%s@test.te" % str(uuid4())

        partner = self.partner_obj.create(
            {
                "name": sample_values,
                "email": email_test,
            }
        )

        vals = {
            "name": str(uuid4()),
            "dst_model_id": dst_model.id,
        }
        dist_list = self.distri_list_obj.create(vals)

        vals = {
            "name": str(uuid4()),
            "domain": "[['name', '=', '%s']]" % sample_values,
            "src_model_id": dst_model.id,
            "distribution_list_id": dist_list.id,
            "bridge_field_id": self.partner_id_field.id,
        }
        self.distri_list_line_obj.create(vals)

        context = self.env.context.copy()
        context.update(
            {
                "default_composition_mode": "mass_mail",
            }
        )

        mail_composer_vals = {
            "email_from": email_test,
            "parent_id": False,
            "use_active_domain": False,
            "no_auto_thread": False,
            "partner_ids": [[6, False, []]],
            "notify": False,
            "distribution_list_id": dist_list.id,
            "subject": sample_values,
            "model": "res.partner",
        }
        mail_composer = self.mail_composer_obj.with_context(context).create(
            mail_composer_vals
        )
        mail_composer.send_mail()

        mails = self.mail_obj.search(
            [
                ("subject", "=", sample_values),
            ]
        )
        self.assertEqual(
            len(mails), 1, "Should have only one mail generated by this mass mailing"
        )
        mail = first(mails)
        self.assertEqual(
            partner.id,
            mail.res_id,
            "Should be the partner_id defined into the distribution list",
        )
